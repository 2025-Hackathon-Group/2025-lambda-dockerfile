services:
  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: pdf_translator_frontend
    volumes:
      - "./app:/app"
      - "/app/node_modules"
    environment:
      - NODE_ENV=development
    depends_on:
      - api
    networks:
      - pdf_translator
    restart: unless-stopped

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: pdf_translator_api
    volumes:
      - "./api:/app"
    ports:
      - "3333:3333"
    depends_on:
      - db
    env_file:
      - ./api/.env
    networks:
      - pdf_translator
    restart: unless-stopped

  db:
    image: postgres:latest
    container_name: pdf_translator_db
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pdf_translator
    restart: unless-stopped

  s3:
    image: minio/minio
    container_name: s3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_REGION=us-east-1
    volumes:
      - ./docker/s3:/data
    networks:
      - pdf_translator
    command: server /data --console-address ":9001" 
    restart: unless-stopped

  caddy:
    image: caddy
    restart: unless-stopped
    environment:
      SERVER_NAME: ${SERVER_NAME:-:80}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./data/caddy/data:/data
      - ./data/caddy/config:/config
    networks:
      pdf_translator:
        aliases:
          - api.local
          - app.local


volumes:
  postgres_data:

networks:
  pdf_translator: